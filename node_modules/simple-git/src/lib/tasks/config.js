"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitConfigScope = void 0;
const ConfigList_1 = require("../responses/ConfigList");
const utils_1 = require("../utils");
var GitConfigScope;
(function (GitConfigScope) {
    GitConfigScope["system"] = "system";
    GitConfigScope["global"] = "global";
    GitConfigScope["local"] = "local";
    GitConfigScope["worktree"] = "worktree";
})(GitConfigScope = exports.GitConfigScope || (exports.GitConfigScope = {}));
function asConfigScope(scope) {
    if (typeof scope === 'string' && GitConfigScope.hasOwnProperty(scope)) {
        return scope;
    }
    return GitConfigScope.local;
}
function addConfigTask(key, value, append, scope) {
    const commands = ['config', `--${scope}`];
    if (append) {
        commands.push('--add');
    }
    commands.push(key, value);
    return {
        commands,
        format: 'utf-8',
        parser(text) {
            return text;
        }
    };
}
function listConfigTask() {
    return {
        commands: ['config', '--list', '--show-origin', '--null'],
        format: 'utf-8',
        parser(text) {
            return ConfigList_1.configListParser(text);
        },
    };
}
function default_1() {
    return {
        addConfig(key, value, ...rest) {
            return this._runTask(addConfigTask(key, value, rest[0] === true, asConfigScope(rest[1])), utils_1.trailingFunctionArgument(arguments));
        },
        listConfig() {
            return this._runTask(listConfigTask(), utils_1.trailingFunctionArgument(arguments));
        },
    };
}
exports.default = default_1;
//# sourceMappingURL=config.js.map